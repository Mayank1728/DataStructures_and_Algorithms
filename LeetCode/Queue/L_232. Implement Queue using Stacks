class MyQueue {

    /** Initialize your data structure here. */
    Stack < Integer > newSt;
    Stack < Integer > oldSt;
    public MyQueue() {
        newSt = new Stack < > ();
        oldSt = new Stack < > ();
    }

    /** Push element x to the back of queue. */
    public void push(int x) {
        newSt.add(x);
    }

    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        if (oldSt.isEmpty()) {
            while (!newSt.isEmpty()) {
                oldSt.add(newSt.pop());
            }
        }
        return oldSt.pop();
    }

    /** Get the front element. */
    public int peek() {
        if (oldSt.isEmpty()) {
            while (!newSt.isEmpty()) {
                oldSt.add(newSt.pop());
            }
        }
        return oldSt.peek();
    }

    /** Returns whether the queue is empty. */
    public boolean empty() {
        return newSt.isEmpty() && oldSt.isEmpty();
    }
}

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */
