/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
  
  int depth_x = 0;
    int depth_y = 0;
    boolean isSameParent = false;
   public boolean isCousins(TreeNode root, int x, int y)
    {
        if (root.val == x || root.val == y)
        {
            return false;
        }

        FindCousins(root, x, y, 0);

        if (!isSameParent && depth_x == depth_y)
        {
            return true;
        }
        else
        {
            return false;
        }

    }

    private void FindCousins(TreeNode node, int x, int y, int depth)
    {
        if (node == null)
        {
            return;
        }

        if (node.left != null && node.right != null &&
            (node.left.val == x || node.left.val == y) &&
            (node.right.val == x || node.right.val == y))
        {
            isSameParent = true;
            return;
        }

        if (node.val == x)
        {
            depth_x = depth;
            return;
        }

        if (node.val == y)
        {
            depth_y = depth;
            return;
        }

        FindCousins(node.left, x, y, depth + 1);
        FindCousins(node.right, x, y, depth + 1);
    }
}
