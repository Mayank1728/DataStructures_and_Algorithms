class Solution {
    public String frequencySort(String s) {
        Map < Character, Integer > hm = new LinkedHashMap < Character, Integer > ();
        for (char c: s.toCharArray()) {
            int val = hm.getOrDefault(c, 0);
            hm.put(c, val + 1);
        }
        List < Map.Entry < Character, Integer >> li = new LinkedList < Map.Entry < Character, Integer >> (hm.entrySet());
        Collections.sort(li, new Comparator < Map.Entry < Character, Integer > > () {
            public int compare(Map.Entry < Character, Integer > o1,
                Map.Entry < Character, Integer > o2) {
                return (o2.getValue()).compareTo(o1.getValue());
            }
        });
        hm = new LinkedHashMap < Character, Integer > ();
        for (Map.Entry < Character, Integer > aa: li) {
            hm.put(aa.getKey(), aa.getValue());
        }
        StringBuilder res = new StringBuilder("");
        for (Map.Entry m: hm.entrySet()) {
            int n = (int) m.getValue();
            while (n > 0) {
                res.append(m.getKey());
                n--;
            }
        }
        return res.toString();
    }
}
