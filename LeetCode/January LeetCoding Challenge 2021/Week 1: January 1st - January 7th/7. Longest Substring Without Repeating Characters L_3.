https://leetcode.com/problems/longest-substring-without-repeating-characters/solution/

/*
Given a string s, find the length of the longest substring without repeating characters.

Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.

Example 2:
Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.

Example 4:
Input: s = ""
Output: 0

Constraints:
0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.
*/

//Solution 1

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int ans=0, i=0, n=s.length();
        HashMap<Character, Integer> hm = new HashMap<>();
        for(int j=0;j<n;j++){
          if(hm.containsKey(s.charAt(j))){
            i = Math.max(hm.get(s.charAt(j)), i);
          }
          ans= Math.max(j-i+1, ans);
          hm.put(s.charAt(j), j+1);
        }
      return ans;
    }
}

//Solution 2

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s==null || s.length()==0)
          return 0;
        HashSet<Character> chars = new HashSet<>();
        int l=0, r=0, result=0;
      
        while(r<s.length()){
          char curr = s.charAt(r);
          if(chars.contains(curr)){
            while(s.charAt(l)!=curr){
              chars.remove(s.charAt(l));
              l++;
            }
            l++;
          }
          chars.add(curr);
          result = Math.max(result, r-l+1);
          r++;
        }
      
      return result;
    }
}

//Solution 3

class Solution {
    public int lengthOfLongestSubstring(String s) {
      //basic check
        if(s==null || s.length()==0)
          return 0;
      
      //creating hasmap
        HashMap<Character, Integer> hmap = new HashMap<>();
      
      //initializing variables
        int l=0, r=0, result=0;
      
      
        while(r<s.length()){
          char curr = s.charAt(r);
          if(hmap.containsKey(curr)){
            l = Math.max(l, hmap.get(curr)+1);
          }
          hmap.put(curr, r);
          result = Math.max(result, r-l+1);
          r++;
        }
      return result;
    }
}

