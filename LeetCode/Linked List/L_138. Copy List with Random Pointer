/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if (head == null)
            return head;
        Node curr = head;
        while (curr != null) {
            Node newNode = new Node(curr.val);
            newNode.next = curr.next;
            curr.next = newNode;
            curr = curr.next.next;
        }

        curr = head;
        while (curr != null) {
            curr.next.random = curr.random == null ? null : curr.random.next;
            curr = curr.next != null ? curr.next.next : null;
        }

        Node newHead = new Node(0);
        curr = head;
        newHead.next = curr.next;
        Node front = curr.next.next;
        while (curr.next.next != null) {
            curr.next.next = front.next;
            curr.next = front;
            curr = front;
            front = front.next.next;
        }
        curr.next = null;
        return newHead.next;
    }
}
