https://leetcode.com/problems/permutations-ii/

/*
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Constraints:
1 <= nums.length <= 8
-10 <= nums[i] <= 10
*/

//extra space

https://www.youtube.com/watch?v=qhBVWf0YafA

class Solution {
    private void permutation(int[] nums,List<List<Integer>> res, List<Integer> temp,HashMap<Integer,Integer> hm){
        if(temp.size()==nums.length){
            for(int i : temp){
            System.out.print(i+" ");
                }
            res.add(new ArrayList<>(temp));
            return;
        }
        for(int m: hm.keySet()){
            if(hm.get(m)>0){
                temp.add(m);
                hm.put(m, hm.get(m)-1);
                permutation(nums, res,temp, hm);
                temp.remove(temp.size()-1);
                hm.put(m,hm.get(m)+1); 
            }
            
        }
        
    }
    
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList();
        List<Integer> temp= new ArrayList();
        HashMap<Integer,Integer> hm = new HashMap<>();
        for(int n:nums){
          hm.put(n,hm.getOrDefault(n,0)+1);
        }
        
        permutation(nums,res, temp,hm);
        return res;
    }
}
