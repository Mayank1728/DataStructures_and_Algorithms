class RandomizedSet {

    ArrayList < Integer > hs;
    /** Initialize your data structure here. */
    public RandomizedSet() {
        hs = new ArrayList < Integer > ();
    }

    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if (hs.contains(val))
            return false;
        hs.add(val);
        return true;
    }

    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if (!hs.contains(val))
            return false;
        hs.remove(val);
        return true;
    }

    /** Get a random element from the set. */
    public int getRandom() {
        Random rand = new Random(); // Choose a different seed 
        int index = rand.nextInt(hs.size());
        int res = hs.get(index);
        // Return element at randomly picked index 
        return res;
    }
}

//

Passes test cases

public RandomizedSet() {
    valueMap = new HashMap < > ();
    idxMap = new HashMap < > ();
}

/** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
public boolean insert(int val) {
    if (valueMap.containsKey(val)) {
        return false;
    }

    valueMap.put(val, valueMap.size());
    idxMap.put(idxMap.size(), val);

    return true;
}

/** Removes a value from the set. Returns true if the set contained the specified element. */
public boolean remove(int val) {
    if (valueMap.containsKey(val)) {
        int idx = valueMap.get(val);
        valueMap.remove(val);
        idxMap.remove(idx);

        Integer tailElem = idxMap.get(idxMap.size());
        if (tailElem != null) {
            idxMap.put(idx, tailElem);
            valueMap.put(tailElem, idx);
        }

        return true;
    }

    return false;
}

/** Get a random element from the set. */
public int getRandom() {
    if (valueMap.size() == 0) {
        return -1;
    }

    if (valueMap.size() == 1) {
        return idxMap.get(0);
    }

    Random r = new Random();
    int idx = r.nextInt(valueMap.size());

    return idxMap.get(idx);
}
