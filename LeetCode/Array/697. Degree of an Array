class Solution {

    public static ArrayList < Integer > getHigestFrequencyNumbers(int[] nums) {
        ArrayList < Integer > arr = new ArrayList < > ();

        HashMap < Integer, Integer > hm = new HashMap < Integer, Integer > ();
        int max = -1;
        int oldVal = 0;
        for (int i: nums) {
            int val = hm.getOrDefault(i, 0);
            hm.put(i, val + 1);
            if (val + 1 > oldVal) {
                max = i;
                oldVal = val + 1;
            }
        }
        arr.add(max);
        for (Map.Entry < Integer, Integer > m: hm.entrySet()) {
            if (m.getValue() == oldVal) {
                arr.add(m.getKey());
            }
        }
        return arr;
    }

    public int findShortestSubArray(int[] nums) {
        if (nums.length == 1)
            return 1;

        ArrayList < Integer > li = getHigestFrequencyNumbers(nums);
        int res = Integer.MAX_VALUE;
        for (int ele: li) {

            int left = 0;
            for (; left < nums.length; left++) {
                if (nums[left] == ele)
                    break;

            }
            int right = nums.length - 1;
            for (; right >= 0; right--) {
                if (nums[right] == ele)
                    break;

            }
            res = Math.min(res, right - left + 1);
        }
        return res;
    }
}
