/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
*/


//O(n) space

class MinStack {

 List < Integer > stack;
 List < Integer > minList;
 /** initialize your data structure here. */
 public MinStack() {
  stack = new ArrayList < Integer > ();
  minList = new ArrayList < Integer > ();
 }



 public void push(int x) {
  setMin(x);

  stack.add(x);
 }

 public void pop() {
  if (!stack.isEmpty()) {
   minList.remove(minList.size() - 1);
   stack.remove(stack.size() - 1);
  }
 }

 public int top() {
  if (stack.isEmpty()) {
   return Integer.MIN_VALUE;
  }

  return stack.get(stack.size() - 1);
 }

 public int getMin() {
  if (stack.isEmpty()) {
   return Integer.MIN_VALUE;
  }

  return minList.get(minList.size() - 1);
 }

 private void setMin(int x) {

  if (getMin() == Integer.MIN_VALUE) {
   minList.add(x);
   return;
  }

  if (getMin() < x) {
   minList.add(getMin());
  } else {
   minList.add(x);
  }
 }
}
/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */


//Better space complexity

class MinStack {

    List < Integer > stack;
    List < Integer > minList;
    /** initialize your data structure here. */
    public MinStack() {
        stack = new ArrayList < Integer > ();
        minList = new ArrayList < Integer > ();
    }

    public void push(int x) {
        stack.add(x);
        if (stack.isEmpty()) {
            minList.add(x);
        } else {
            int m = getMin();
            if (x <= m) {
                minList.add(x);
            }
        }
    }

    public void pop() {
        if (!stack.isEmpty()) {
            int top = top();
            int m = getMin();
            if (top == m) {
                minList.remove(minList.size() - 1);
            }
            stack.remove(stack.size() - 1);
        }
    }

    public int top() {
        if (stack.isEmpty()) {
            return Integer.MAX_VALUE;
        }

        return stack.get(stack.size() - 1);
    }

    public int getMin() {
        if (minList.isEmpty()) {
            return Integer.MAX_VALUE;
        }

        return minList.get(minList.size() - 1);
    }

}
/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(x);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
