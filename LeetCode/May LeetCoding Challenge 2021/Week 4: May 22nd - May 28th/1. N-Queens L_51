class Solution {

  List < List < String >> res = new ArrayList();

  public List < List < String >> solveNQueens(int n) {
    int[][] arr = new int[n][n];
    nQueens(0, arr, n, new ArrayList < String > ());
    return res;
  }

  public boolean isSafe(int[][] arr, int row, int col) {
    int n = arr.length;

    for (int i = 0; i < n; i++) {
      if (arr[row][i] == 1) {
        return false;
      }
      if (arr[i][col] == 1)
        return false;
    }
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) {
      if (arr[i][j] == 1)
        return false;
    }
    for (int i = row, j = col; i < n && j < n; i++, j++) {
      if (arr[i][j] == 1)
        return false;
    }
    for (int i = row, j = col; i < n && j < n && i >= 0 && j >= 0; i--, j++) {
      if (arr[i][j] == 1)
        return false;
    }
    for (int i = row, j = col; i < n && j < n && i >= 0 && j >= 0; i++, j--) {
      if (arr[i][j] == 1)
        return false;
    }
    return true;
  }

  public boolean nQueens(int row, int[][] arr, int n, List < String > s) {
    if (row >= n) {
      res.add(new ArrayList < String > (s));
      return true;
    }

    for (int col = 0; col < n; col++) {
      if (isSafe(arr, row, col)) {

        String temp = new String();
        for (int i = 0; i < n; i++) {
          if (i == col) {
            temp += "Q";
          } else {
            temp += ".";
          }
        }
        s.add(temp);
        arr[row][col] = 1;
        if (nQueens(row + 1, arr, n, s)) {}
        s.remove(s.size() - 1);
        arr[row][col] = 0;
      }

    }
    return false;
  }
}
