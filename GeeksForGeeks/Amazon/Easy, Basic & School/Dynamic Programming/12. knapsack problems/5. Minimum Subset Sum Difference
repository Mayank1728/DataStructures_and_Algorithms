https://practice.geeksforgeeks.org/problems/minimum-sum-partition/0

Aditya verma: https://www.youtube.com/watch?v=-GtpxG6l_Mc&list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go&index=11

import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    static int minimumSum(int[] arr, int n, int sum) {
        int s = sum / 2;
        boolean dp[][] = new boolean[n + 1][s + 1];
        for (int i = 0; i <= s; i++) {
            dp[0][i] = false;
        }
        for (int i = 0; i <= n; i++) {
            dp[i][0] = true;
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= s; j++) {
                if (j < arr[i - 1]) {
                    dp[i][j] = dp[i - 1][j];
                } else {
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - arr[i - 1]];
                }
            }
        }
        int max = Integer.MAX_VALUE;
        for (int i = 0; i <= s; i++) {
            if (dp[n][i] == true) {
                max = Math.min(max, Math.abs(sum - (2 * i)));
            }
        }
        return max;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        for (int j = 0; j < t; j++) {
            int n = sc.nextInt();
            int arr[] = new int[n];
            int sum = 0;
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
                sum += arr[i];
            }
            System.out.println(minimumSum(arr, n, sum));
        }
    }
}
